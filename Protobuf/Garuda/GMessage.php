<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: IMMessage.proto

namespace Protobuf\Garuda;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * 通信报文(主pb文件)
 * </pre>
 *
 * Protobuf type <code>protobuf.Garuda.GMessage</code>
 */
class GMessage extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * 报文版本， 1
     * </pre>
     *
     * <code>string version = 1;</code>
     */
    private $version = '';
    /**
     * <pre>
     *IM分配的appkey，直播 : uplive 。Client在出席注册的时候传入即可。
     * </pre>
     *
     * <code>string appkey = 2;</code>
     */
    private $appkey = '';
    /**
     * <pre>
     *appkey下不同的马甲号，原始包不需要传值。Client在出席注册的时候传入即可。
     * </pre>
     *
     * <code>string feature = 3;</code>
     */
    private $feature = '';
    /**
     * <pre>
     *消息ID，针对每个发送端（即Client端）消息的唯一标识(server端回ACK时,客户端可根据此ID唯一标识)
     * </pre>
     *
     * <code>string msgid = 4;</code>
     */
    private $msgid = '';
    /**
     * <pre>
     *Client发送时间(单位:毫秒)
     * </pre>
     *
     * <code>int64 sendTime = 5;</code>
     */
    private $sendTime = 0;
    /**
     * <pre>
     *IM服务端接收时间(单位:毫秒)
     * </pre>
     *
     * <code>int64 receiveTime = 6;</code>
     */
    private $receiveTime = 0;
    /**
     * <pre>
     *消息类型，详见 Type 枚举, IMConstant.Type
     * </pre>
     *
     * <code>int32 type = 7;</code>
     */
    private $type = 0;
    /**
     * <pre>
     *业务类型，详见 MsgType 枚举，IMConstant.MsgType
     * </pre>
     *
     * <code>int32 mType = 8;</code>
     */
    private $mType = 0;
    /**
     * <pre>
     *消息格式，详见 MsgFormat 枚举，IMConstant.MsgFormat
     * </pre>
     *
     * <code>int32 mFormat = 9;</code>
     */
    private $mFormat = 0;
    /**
     * <pre>
     * 发送者ID
     * </pre>
     *
     * <code>int64 sId = 10;</code>
     */
    private $sId = 0;
    /**
     * <pre>
     * 接收者ID
     * </pre>
     *
     * <code>int64 rId = 11;</code>
     */
    private $rId = 0;
    /**
     * <pre>
     * 组ID
     * </pre>
     *
     * <code>int64 gId = 12;</code>
     */
    private $gId = 0;
    /**
     * <pre>
     * 消息版本号(用户／系统)，IM服务端生成。用于Client与IM进行消息同步。
     * </pre>
     *
     * <code>int64 msgVersion = 13;</code>
     */
    private $msgVersion = 0;
    /**
     * <pre>
     *子消息（群）版本号，IM服务端生成，用于同步子（群）消息。
     * </pre>
     *
     * <code>int64 subVersion = 14;</code>
     */
    private $subVersion = 0;
    /**
     * <pre>
     *消息报文体，根据不同的消息类型type、业务类型 mtype、消息格式 mformat来决定消息报文体 body。
     * </pre>
     *
     * <code>bytes body = 15;</code>
     */
    private $body = '';
    /**
     * <pre>
     *消息状态：0：正常初始化， 1：隐藏，默认为0。应用场景是用于维护用户接受消息的版本号保持连续，如果Client收到的该值为1时，则不展示该消息，仅仅用户版本号维护。
     * </pre>
     *
     * <code>int32 msgStatus = 16;</code>
     */
    private $msgStatus = 0;
    /**
     * <pre>
     * 批量发送用户id
     * </pre>
     *
     * <code>repeated int64 rIds = 17;</code>
     */
    private $rIds;
    /**
     * <pre>
     *多语言标识，默认'0'， '0':全部语言 ，其他为对应语言标识符，如 'zh-TW'
     * </pre>
     *
     * <code>string multilang = 18;</code>
     */
    private $multilang = '';
    /**
     * <pre>
     *国家码
     * </pre>
     *
     * <code>string cc = 19;</code>
     */
    private $cc = '';
    /**
     * <pre>
     * 终端类型，详见 TermType 枚举, IMConstant.TermType。
     * </pre>
     *
     * <code>int32 termType = 20;</code>
     */
    private $termType = 0;
    /**
     * <pre>
     *由业务端传入, 用于兼容历史push类型，push标识 0 需要IM发push ， 1 不需要IM发push，由业务端发push ，2 直发消息无push， 默认 0
     * </pre>
     *
     * <code>int32 pushMark = 21;</code>
     */
    private $pushMark = 0;
    /**
     * <pre>
     *目前仅IM内部使用，由业务端传入, 发送标识，默认 0 ; 0 直发，并存储离线; 1 直发，不存储离线；2 不直发，只存储离线；
     * </pre>
     *
     * <code>int32 sendMark = 22;</code>
     */
    private $sendMark = 0;
    /**
     * <pre>
     *扩展字段
     * </pre>
     *
     * <code>string ext = 23;</code>
     */
    private $ext = '';

    public function __construct() {
        \GPBMetadata\IMMessage::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * 报文版本， 1
     * </pre>
     *
     * <code>string version = 1;</code>
     */
    public function getVersion()
    {
        return $this->version;
    }

    /**
     * <pre>
     * 报文版本， 1
     * </pre>
     *
     * <code>string version = 1;</code>
     */
    public function setVersion($var)
    {
        GPBUtil::checkString($var, True);
        $this->version = $var;
    }

    /**
     * <pre>
     *IM分配的appkey，直播 : uplive 。Client在出席注册的时候传入即可。
     * </pre>
     *
     * <code>string appkey = 2;</code>
     */
    public function getAppkey()
    {
        return $this->appkey;
    }

    /**
     * <pre>
     *IM分配的appkey，直播 : uplive 。Client在出席注册的时候传入即可。
     * </pre>
     *
     * <code>string appkey = 2;</code>
     */
    public function setAppkey($var)
    {
        GPBUtil::checkString($var, True);
        $this->appkey = $var;
    }

    /**
     * <pre>
     *appkey下不同的马甲号，原始包不需要传值。Client在出席注册的时候传入即可。
     * </pre>
     *
     * <code>string feature = 3;</code>
     */
    public function getFeature()
    {
        return $this->feature;
    }

    /**
     * <pre>
     *appkey下不同的马甲号，原始包不需要传值。Client在出席注册的时候传入即可。
     * </pre>
     *
     * <code>string feature = 3;</code>
     */
    public function setFeature($var)
    {
        GPBUtil::checkString($var, True);
        $this->feature = $var;
    }

    /**
     * <pre>
     *消息ID，针对每个发送端（即Client端）消息的唯一标识(server端回ACK时,客户端可根据此ID唯一标识)
     * </pre>
     *
     * <code>string msgid = 4;</code>
     */
    public function getMsgid()
    {
        return $this->msgid;
    }

    /**
     * <pre>
     *消息ID，针对每个发送端（即Client端）消息的唯一标识(server端回ACK时,客户端可根据此ID唯一标识)
     * </pre>
     *
     * <code>string msgid = 4;</code>
     */
    public function setMsgid($var)
    {
        GPBUtil::checkString($var, True);
        $this->msgid = $var;
    }

    /**
     * <pre>
     *Client发送时间(单位:毫秒)
     * </pre>
     *
     * <code>int64 sendTime = 5;</code>
     */
    public function getSendTime()
    {
        return $this->sendTime;
    }

    /**
     * <pre>
     *Client发送时间(单位:毫秒)
     * </pre>
     *
     * <code>int64 sendTime = 5;</code>
     */
    public function setSendTime($var)
    {
        GPBUtil::checkInt64($var);
        $this->sendTime = $var;
    }

    /**
     * <pre>
     *IM服务端接收时间(单位:毫秒)
     * </pre>
     *
     * <code>int64 receiveTime = 6;</code>
     */
    public function getReceiveTime()
    {
        return $this->receiveTime;
    }

    /**
     * <pre>
     *IM服务端接收时间(单位:毫秒)
     * </pre>
     *
     * <code>int64 receiveTime = 6;</code>
     */
    public function setReceiveTime($var)
    {
        GPBUtil::checkInt64($var);
        $this->receiveTime = $var;
    }

    /**
     * <pre>
     *消息类型，详见 Type 枚举, IMConstant.Type
     * </pre>
     *
     * <code>int32 type = 7;</code>
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * <pre>
     *消息类型，详见 Type 枚举, IMConstant.Type
     * </pre>
     *
     * <code>int32 type = 7;</code>
     */
    public function setType($var)
    {
        GPBUtil::checkInt32($var);
        $this->type = $var;
    }

    /**
     * <pre>
     *业务类型，详见 MsgType 枚举，IMConstant.MsgType
     * </pre>
     *
     * <code>int32 mType = 8;</code>
     */
    public function getMType()
    {
        return $this->mType;
    }

    /**
     * <pre>
     *业务类型，详见 MsgType 枚举，IMConstant.MsgType
     * </pre>
     *
     * <code>int32 mType = 8;</code>
     */
    public function setMType($var)
    {
        GPBUtil::checkInt32($var);
        $this->mType = $var;
    }

    /**
     * <pre>
     *消息格式，详见 MsgFormat 枚举，IMConstant.MsgFormat
     * </pre>
     *
     * <code>int32 mFormat = 9;</code>
     */
    public function getMFormat()
    {
        return $this->mFormat;
    }

    /**
     * <pre>
     *消息格式，详见 MsgFormat 枚举，IMConstant.MsgFormat
     * </pre>
     *
     * <code>int32 mFormat = 9;</code>
     */
    public function setMFormat($var)
    {
        GPBUtil::checkInt32($var);
        $this->mFormat = $var;
    }

    /**
     * <pre>
     * 发送者ID
     * </pre>
     *
     * <code>int64 sId = 10;</code>
     */
    public function getSId()
    {
        return $this->sId;
    }

    /**
     * <pre>
     * 发送者ID
     * </pre>
     *
     * <code>int64 sId = 10;</code>
     */
    public function setSId($var)
    {
        GPBUtil::checkInt64($var);
        $this->sId = $var;
    }

    /**
     * <pre>
     * 接收者ID
     * </pre>
     *
     * <code>int64 rId = 11;</code>
     */
    public function getRId()
    {
        return $this->rId;
    }

    /**
     * <pre>
     * 接收者ID
     * </pre>
     *
     * <code>int64 rId = 11;</code>
     */
    public function setRId($var)
    {
        GPBUtil::checkInt64($var);
        $this->rId = $var;
    }

    /**
     * <pre>
     * 组ID
     * </pre>
     *
     * <code>int64 gId = 12;</code>
     */
    public function getGId()
    {
        return $this->gId;
    }

    /**
     * <pre>
     * 组ID
     * </pre>
     *
     * <code>int64 gId = 12;</code>
     */
    public function setGId($var)
    {
        GPBUtil::checkInt64($var);
        $this->gId = $var;
    }

    /**
     * <pre>
     * 消息版本号(用户／系统)，IM服务端生成。用于Client与IM进行消息同步。
     * </pre>
     *
     * <code>int64 msgVersion = 13;</code>
     */
    public function getMsgVersion()
    {
        return $this->msgVersion;
    }

    /**
     * <pre>
     * 消息版本号(用户／系统)，IM服务端生成。用于Client与IM进行消息同步。
     * </pre>
     *
     * <code>int64 msgVersion = 13;</code>
     */
    public function setMsgVersion($var)
    {
        GPBUtil::checkInt64($var);
        $this->msgVersion = $var;
    }

    /**
     * <pre>
     *子消息（群）版本号，IM服务端生成，用于同步子（群）消息。
     * </pre>
     *
     * <code>int64 subVersion = 14;</code>
     */
    public function getSubVersion()
    {
        return $this->subVersion;
    }

    /**
     * <pre>
     *子消息（群）版本号，IM服务端生成，用于同步子（群）消息。
     * </pre>
     *
     * <code>int64 subVersion = 14;</code>
     */
    public function setSubVersion($var)
    {
        GPBUtil::checkInt64($var);
        $this->subVersion = $var;
    }

    /**
     * <pre>
     *消息报文体，根据不同的消息类型type、业务类型 mtype、消息格式 mformat来决定消息报文体 body。
     * </pre>
     *
     * <code>bytes body = 15;</code>
     */
    public function getBody()
    {
        return $this->body;
    }

    /**
     * <pre>
     *消息报文体，根据不同的消息类型type、业务类型 mtype、消息格式 mformat来决定消息报文体 body。
     * </pre>
     *
     * <code>bytes body = 15;</code>
     */
    public function setBody($var)
    {
        GPBUtil::checkString($var, False);
        $this->body = $var;
    }

    /**
     * <pre>
     *消息状态：0：正常初始化， 1：隐藏，默认为0。应用场景是用于维护用户接受消息的版本号保持连续，如果Client收到的该值为1时，则不展示该消息，仅仅用户版本号维护。
     * </pre>
     *
     * <code>int32 msgStatus = 16;</code>
     */
    public function getMsgStatus()
    {
        return $this->msgStatus;
    }

    /**
     * <pre>
     *消息状态：0：正常初始化， 1：隐藏，默认为0。应用场景是用于维护用户接受消息的版本号保持连续，如果Client收到的该值为1时，则不展示该消息，仅仅用户版本号维护。
     * </pre>
     *
     * <code>int32 msgStatus = 16;</code>
     */
    public function setMsgStatus($var)
    {
        GPBUtil::checkInt32($var);
        $this->msgStatus = $var;
    }

    /**
     * <pre>
     * 批量发送用户id
     * </pre>
     *
     * <code>repeated int64 rIds = 17;</code>
     */
    public function getRIds()
    {
        return $this->rIds;
    }

    /**
     * <pre>
     * 批量发送用户id
     * </pre>
     *
     * <code>repeated int64 rIds = 17;</code>
     */
    public function setRIds(&$var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::INT64);
        $this->rIds = $arr;
    }

    /**
     * <pre>
     *多语言标识，默认'0'， '0':全部语言 ，其他为对应语言标识符，如 'zh-TW'
     * </pre>
     *
     * <code>string multilang = 18;</code>
     */
    public function getMultilang()
    {
        return $this->multilang;
    }

    /**
     * <pre>
     *多语言标识，默认'0'， '0':全部语言 ，其他为对应语言标识符，如 'zh-TW'
     * </pre>
     *
     * <code>string multilang = 18;</code>
     */
    public function setMultilang($var)
    {
        GPBUtil::checkString($var, True);
        $this->multilang = $var;
    }

    /**
     * <pre>
     *国家码
     * </pre>
     *
     * <code>string cc = 19;</code>
     */
    public function getCc()
    {
        return $this->cc;
    }

    /**
     * <pre>
     *国家码
     * </pre>
     *
     * <code>string cc = 19;</code>
     */
    public function setCc($var)
    {
        GPBUtil::checkString($var, True);
        $this->cc = $var;
    }

    /**
     * <pre>
     * 终端类型，详见 TermType 枚举, IMConstant.TermType。
     * </pre>
     *
     * <code>int32 termType = 20;</code>
     */
    public function getTermType()
    {
        return $this->termType;
    }

    /**
     * <pre>
     * 终端类型，详见 TermType 枚举, IMConstant.TermType。
     * </pre>
     *
     * <code>int32 termType = 20;</code>
     */
    public function setTermType($var)
    {
        GPBUtil::checkInt32($var);
        $this->termType = $var;
    }

    /**
     * <pre>
     *由业务端传入, 用于兼容历史push类型，push标识 0 需要IM发push ， 1 不需要IM发push，由业务端发push ，2 直发消息无push， 默认 0
     * </pre>
     *
     * <code>int32 pushMark = 21;</code>
     */
    public function getPushMark()
    {
        return $this->pushMark;
    }

    /**
     * <pre>
     *由业务端传入, 用于兼容历史push类型，push标识 0 需要IM发push ， 1 不需要IM发push，由业务端发push ，2 直发消息无push， 默认 0
     * </pre>
     *
     * <code>int32 pushMark = 21;</code>
     */
    public function setPushMark($var)
    {
        GPBUtil::checkInt32($var);
        $this->pushMark = $var;
    }

    /**
     * <pre>
     *目前仅IM内部使用，由业务端传入, 发送标识，默认 0 ; 0 直发，并存储离线; 1 直发，不存储离线；2 不直发，只存储离线；
     * </pre>
     *
     * <code>int32 sendMark = 22;</code>
     */
    public function getSendMark()
    {
        return $this->sendMark;
    }

    /**
     * <pre>
     *目前仅IM内部使用，由业务端传入, 发送标识，默认 0 ; 0 直发，并存储离线; 1 直发，不存储离线；2 不直发，只存储离线；
     * </pre>
     *
     * <code>int32 sendMark = 22;</code>
     */
    public function setSendMark($var)
    {
        GPBUtil::checkInt32($var);
        $this->sendMark = $var;
    }

    /**
     * <pre>
     *扩展字段
     * </pre>
     *
     * <code>string ext = 23;</code>
     */
    public function getExt()
    {
        return $this->ext;
    }

    /**
     * <pre>
     *扩展字段
     * </pre>
     *
     * <code>string ext = 23;</code>
     */
    public function setExt($var)
    {
        GPBUtil::checkString($var, True);
        $this->ext = $var;
    }

}

