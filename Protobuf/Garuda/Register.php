<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: IMServerActivity.proto

namespace Protobuf\Garuda;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 **
 *Client的注册动作报文采用 统一报文 （其中 type = REGISTER）， 再加上二级结构（即字段 body 内容）注册报文body 。
 *发起该操作的之前需要进行安全认证，请参考 认证服务 文档，获取到 Connector的服务地址，然后发起tcp连接，tcp握手成功后，Client进行长连接的出席注册。注册成功后Client才可以进行业务操作。
 *关键点：
 *1.注册报文的body不需要加密。
 *2.上行报文的isReconn 重连属性，Client 在进行重连动作时设置该字段。重练的场景例如：由于网络断线引起的重连、等等。
 *3.针对注册失败的场景，Client根据 rResult 的返回值进行相应的处理：
 *针对 AUTH_TOKEN_INVALID（认证token失效）、ERROR_M1（m1错误），Client需要重新请求 认证服务 获取认证信息，然后重新注册。
 *如果出现其它的错误情况，则可能是恶意请求、或IM服务端出现内部错误，这种情况，Client可以按一定规则进行重试。
 *IMMessage 上行需要必传字段，下行也会同样返回
 *version     报文版本， 1
 *appkey      IM分配的appkey，直播 : uplive 。Client在出席注册的时候传入即可。
 *feature     appkey下不同的马甲号，原始包不需要传值。Client在出席注册的时候传入即可。
 *sendTime    发送时间(单位:毫秒)
 *type        注册：REGISTER
 *sid         发送者标识
 *body        消息报文体，IMServerActivity.Register
 * </pre>
 *
 * Protobuf type <code>protobuf.Garuda.Register</code>
 */
class Register extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     *设备唯一标识，（处理同一个用户在不同设备上登录的情况）
     * </pre>
     *
     * <code>string deviceid = 1;</code>
     */
    private $deviceid = '';
    /**
     * <pre>
     * 终端类型，详见 TermType 枚举, IMConstant.TermType
     * </pre>
     *
     * <code>int32 termType = 2;</code>
     */
    private $termType = 0;
    /**
     * <pre>
     *应用版本号
     * </pre>
     *
     * <code>string appVersion = 3;</code>
     */
    private $appVersion = '';
    /**
     * <pre>
     *应用名称 uplive / 马甲包
     * </pre>
     *
     * <code>string appName = 4;</code>
     */
    private $appName = '';
    /**
     * <pre>
     *渠道
     * </pre>
     *
     * <code>string channel = 5;</code>
     */
    private $channel = '';
    /**
     * <pre>
     *设备详情
     * </pre>
     *
     * <code>.protobuf.Garuda.DeviceDetail deviceDetail = 6;</code>
     */
    private $deviceDetail = null;
    /**
     * <pre>
     *用户 token
     * </pre>
     *
     * <code>string userToken = 7;</code>
     */
    private $userToken = '';
    /**
     * <pre>
     *用户信息
     * </pre>
     *
     * <code>.protobuf.Garuda.UserInfo userInfo = 8;</code>
     */
    private $userInfo = null;
    /**
     * <pre>
     * 是否重连
     * </pre>
     *
     * <code>bool isReconn = 9;</code>
     */
    private $isReconn = false;
    /**
     * <pre>
     *IM authToken  可解密m1得到对称密钥
     * </pre>
     *
     * <code>bytes authToken = 10;</code>
     */
    private $authToken = '';
    /**
     * <pre>
     *加密后的对称秘钥，用authToken解密，可得到对称密钥，用于后面对用户发送的聊天消息进行对称加密。
     * </pre>
     *
     * <code>bytes m1 = 11;</code>
     */
    private $m1 = '';
    /**
     * <pre>
     *注册结果（下行报文返回），0 代表成功，其他结果参见 IMConstant.ResultCode
     * </pre>
     *
     * <code>int32 rResult = 12;</code>
     */
    private $rResult = 0;

    public function __construct() {
        \GPBMetadata\IMServerActivity::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     *设备唯一标识，（处理同一个用户在不同设备上登录的情况）
     * </pre>
     *
     * <code>string deviceid = 1;</code>
     */
    public function getDeviceid()
    {
        return $this->deviceid;
    }

    /**
     * <pre>
     *设备唯一标识，（处理同一个用户在不同设备上登录的情况）
     * </pre>
     *
     * <code>string deviceid = 1;</code>
     */
    public function setDeviceid($var)
    {
        GPBUtil::checkString($var, True);
        $this->deviceid = $var;
    }

    /**
     * <pre>
     * 终端类型，详见 TermType 枚举, IMConstant.TermType
     * </pre>
     *
     * <code>int32 termType = 2;</code>
     */
    public function getTermType()
    {
        return $this->termType;
    }

    /**
     * <pre>
     * 终端类型，详见 TermType 枚举, IMConstant.TermType
     * </pre>
     *
     * <code>int32 termType = 2;</code>
     */
    public function setTermType($var)
    {
        GPBUtil::checkInt32($var);
        $this->termType = $var;
    }

    /**
     * <pre>
     *应用版本号
     * </pre>
     *
     * <code>string appVersion = 3;</code>
     */
    public function getAppVersion()
    {
        return $this->appVersion;
    }

    /**
     * <pre>
     *应用版本号
     * </pre>
     *
     * <code>string appVersion = 3;</code>
     */
    public function setAppVersion($var)
    {
        GPBUtil::checkString($var, True);
        $this->appVersion = $var;
    }

    /**
     * <pre>
     *应用名称 uplive / 马甲包
     * </pre>
     *
     * <code>string appName = 4;</code>
     */
    public function getAppName()
    {
        return $this->appName;
    }

    /**
     * <pre>
     *应用名称 uplive / 马甲包
     * </pre>
     *
     * <code>string appName = 4;</code>
     */
    public function setAppName($var)
    {
        GPBUtil::checkString($var, True);
        $this->appName = $var;
    }

    /**
     * <pre>
     *渠道
     * </pre>
     *
     * <code>string channel = 5;</code>
     */
    public function getChannel()
    {
        return $this->channel;
    }

    /**
     * <pre>
     *渠道
     * </pre>
     *
     * <code>string channel = 5;</code>
     */
    public function setChannel($var)
    {
        GPBUtil::checkString($var, True);
        $this->channel = $var;
    }

    /**
     * <pre>
     *设备详情
     * </pre>
     *
     * <code>.protobuf.Garuda.DeviceDetail deviceDetail = 6;</code>
     */
    public function getDeviceDetail()
    {
        return $this->deviceDetail;
    }

    /**
     * <pre>
     *设备详情
     * </pre>
     *
     * <code>.protobuf.Garuda.DeviceDetail deviceDetail = 6;</code>
     */
    public function setDeviceDetail(&$var)
    {
        GPBUtil::checkMessage($var, \Protobuf\Garuda\DeviceDetail::class);
        $this->deviceDetail = $var;
    }

    /**
     * <pre>
     *用户 token
     * </pre>
     *
     * <code>string userToken = 7;</code>
     */
    public function getUserToken()
    {
        return $this->userToken;
    }

    /**
     * <pre>
     *用户 token
     * </pre>
     *
     * <code>string userToken = 7;</code>
     */
    public function setUserToken($var)
    {
        GPBUtil::checkString($var, True);
        $this->userToken = $var;
    }

    /**
     * <pre>
     *用户信息
     * </pre>
     *
     * <code>.protobuf.Garuda.UserInfo userInfo = 8;</code>
     */
    public function getUserInfo()
    {
        return $this->userInfo;
    }

    /**
     * <pre>
     *用户信息
     * </pre>
     *
     * <code>.protobuf.Garuda.UserInfo userInfo = 8;</code>
     */
    public function setUserInfo(&$var)
    {
        GPBUtil::checkMessage($var, \Protobuf\Garuda\UserInfo::class);
        $this->userInfo = $var;
    }

    /**
     * <pre>
     * 是否重连
     * </pre>
     *
     * <code>bool isReconn = 9;</code>
     */
    public function getIsReconn()
    {
        return $this->isReconn;
    }

    /**
     * <pre>
     * 是否重连
     * </pre>
     *
     * <code>bool isReconn = 9;</code>
     */
    public function setIsReconn($var)
    {
        GPBUtil::checkBool($var);
        $this->isReconn = $var;
    }

    /**
     * <pre>
     *IM authToken  可解密m1得到对称密钥
     * </pre>
     *
     * <code>bytes authToken = 10;</code>
     */
    public function getAuthToken()
    {
        return $this->authToken;
    }

    /**
     * <pre>
     *IM authToken  可解密m1得到对称密钥
     * </pre>
     *
     * <code>bytes authToken = 10;</code>
     */
    public function setAuthToken($var)
    {
        GPBUtil::checkString($var, False);
        $this->authToken = $var;
    }

    /**
     * <pre>
     *加密后的对称秘钥，用authToken解密，可得到对称密钥，用于后面对用户发送的聊天消息进行对称加密。
     * </pre>
     *
     * <code>bytes m1 = 11;</code>
     */
    public function getM1()
    {
        return $this->m1;
    }

    /**
     * <pre>
     *加密后的对称秘钥，用authToken解密，可得到对称密钥，用于后面对用户发送的聊天消息进行对称加密。
     * </pre>
     *
     * <code>bytes m1 = 11;</code>
     */
    public function setM1($var)
    {
        GPBUtil::checkString($var, False);
        $this->m1 = $var;
    }

    /**
     * <pre>
     *注册结果（下行报文返回），0 代表成功，其他结果参见 IMConstant.ResultCode
     * </pre>
     *
     * <code>int32 rResult = 12;</code>
     */
    public function getRResult()
    {
        return $this->rResult;
    }

    /**
     * <pre>
     *注册结果（下行报文返回），0 代表成功，其他结果参见 IMConstant.ResultCode
     * </pre>
     *
     * <code>int32 rResult = 12;</code>
     */
    public function setRResult($var)
    {
        GPBUtil::checkInt32($var);
        $this->rResult = $var;
    }

}

