<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: IMPresenceAuth.proto

namespace Protobuf\Garuda;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 **
 *返回结果
 *（说明：采用uplive统一的结果返回结构，故返回外层实体还是为ResultResponse.Result，
 *其中的 code属性固定为 "SC_SUCCESS",真正的认证结果需参见 "aResult" ）
 * </pre>
 *
 * Protobuf type <code>protobuf.Garuda.AuthResponse</code>
 */
class AuthResponse extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     *认证结果，0 代表成功，其他结果参见 IMConstant.ResultCode
     * </pre>
     *
     * <code>int32 aResult = 1;</code>
     */
    private $aResult = 0;
    /**
     * <pre>
     *IM authToken  可解密m1得到对称密钥
     * </pre>
     *
     * <code>bytes authToken = 2;</code>
     */
    private $authToken = '';
    /**
     * <pre>
     * authToken 的超时时间，单位（秒）
     * </pre>
     *
     * <code>int64 expires = 3;</code>
     */
    private $expires = 0;
    /**
     * <pre>
     *加密后的对称秘钥，用authToken解密，可得到对称密钥，用于后面对用户发送的聊天消息进行对称加密。
     * </pre>
     *
     * <code>bytes m1 = 4;</code>
     */
    private $m1 = '';
    /**
     * <pre>
     * Connector ip
     * </pre>
     *
     * <code>string ip = 5;</code>
     */
    private $ip = '';
    /**
     * <pre>
     * Connector的端口
     * </pre>
     *
     * <code>int32 port = 6;</code>
     */
    private $port = 0;
    /**
     * <pre>
     *备用地址列表，bytes 内容为： Base64.encodeBase64String("ip:port")
     * </pre>
     *
     * <code>repeated bytes addrs = 7;</code>
     */
    private $addrs;

    public function __construct() {
        \GPBMetadata\IMPresenceAuth::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     *认证结果，0 代表成功，其他结果参见 IMConstant.ResultCode
     * </pre>
     *
     * <code>int32 aResult = 1;</code>
     */
    public function getAResult()
    {
        return $this->aResult;
    }

    /**
     * <pre>
     *认证结果，0 代表成功，其他结果参见 IMConstant.ResultCode
     * </pre>
     *
     * <code>int32 aResult = 1;</code>
     */
    public function setAResult($var)
    {
        GPBUtil::checkInt32($var);
        $this->aResult = $var;
    }

    /**
     * <pre>
     *IM authToken  可解密m1得到对称密钥
     * </pre>
     *
     * <code>bytes authToken = 2;</code>
     */
    public function getAuthToken()
    {
        return $this->authToken;
    }

    /**
     * <pre>
     *IM authToken  可解密m1得到对称密钥
     * </pre>
     *
     * <code>bytes authToken = 2;</code>
     */
    public function setAuthToken($var)
    {
        GPBUtil::checkString($var, False);
        $this->authToken = $var;
    }

    /**
     * <pre>
     * authToken 的超时时间，单位（秒）
     * </pre>
     *
     * <code>int64 expires = 3;</code>
     */
    public function getExpires()
    {
        return $this->expires;
    }

    /**
     * <pre>
     * authToken 的超时时间，单位（秒）
     * </pre>
     *
     * <code>int64 expires = 3;</code>
     */
    public function setExpires($var)
    {
        GPBUtil::checkInt64($var);
        $this->expires = $var;
    }

    /**
     * <pre>
     *加密后的对称秘钥，用authToken解密，可得到对称密钥，用于后面对用户发送的聊天消息进行对称加密。
     * </pre>
     *
     * <code>bytes m1 = 4;</code>
     */
    public function getM1()
    {
        return $this->m1;
    }

    /**
     * <pre>
     *加密后的对称秘钥，用authToken解密，可得到对称密钥，用于后面对用户发送的聊天消息进行对称加密。
     * </pre>
     *
     * <code>bytes m1 = 4;</code>
     */
    public function setM1($var)
    {
        GPBUtil::checkString($var, False);
        $this->m1 = $var;
    }

    /**
     * <pre>
     * Connector ip
     * </pre>
     *
     * <code>string ip = 5;</code>
     */
    public function getIp()
    {
        return $this->ip;
    }

    /**
     * <pre>
     * Connector ip
     * </pre>
     *
     * <code>string ip = 5;</code>
     */
    public function setIp($var)
    {
        GPBUtil::checkString($var, True);
        $this->ip = $var;
    }

    /**
     * <pre>
     * Connector的端口
     * </pre>
     *
     * <code>int32 port = 6;</code>
     */
    public function getPort()
    {
        return $this->port;
    }

    /**
     * <pre>
     * Connector的端口
     * </pre>
     *
     * <code>int32 port = 6;</code>
     */
    public function setPort($var)
    {
        GPBUtil::checkInt32($var);
        $this->port = $var;
    }

    /**
     * <pre>
     *备用地址列表，bytes 内容为： Base64.encodeBase64String("ip:port")
     * </pre>
     *
     * <code>repeated bytes addrs = 7;</code>
     */
    public function getAddrs()
    {
        return $this->addrs;
    }

    /**
     * <pre>
     *备用地址列表，bytes 内容为： Base64.encodeBase64String("ip:port")
     * </pre>
     *
     * <code>repeated bytes addrs = 7;</code>
     */
    public function setAddrs(&$var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::BYTES);
        $this->addrs = $arr;
    }

}

