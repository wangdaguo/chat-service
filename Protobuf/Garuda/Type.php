<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: IMConstant.proto

namespace Protobuf\Garuda;

/**
 * <pre>
 *消息类型：决定消息的大类， 确定报文的逻辑走向
 * </pre>
 *
 * Protobuf enum <code>protobuf.Garuda.Type</code>
 */
class Type
{
    /**
     * <pre>
     * 预留
     * </pre>
     *
     * <code>PRESERVE = 0;</code>
     */
    const PRESERVE = 0;
    /**
     * <pre>
     *---------- 消息类别标识：SERVER ，服务器交互类的消息 begin ----------//
     * 出席注册，关联 IMServerActivity.Register
     * </pre>
     *
     * <code>REGISTER = 1;</code>
     */
    const REGISTER = 1;
    /**
     * <pre>
     *心跳，关联 IMMsgActivity.PullVersions
     * </pre>
     *
     * <code>PING = 2;</code>
     */
    const PING = 2;
    /**
     * <code>PONG = 3;</code>
     */
    const PONG = 3;
    /**
     * <pre>
     * 登出，关联 IMServerActivity.Out
     * </pre>
     *
     * <code>OUT = 4;</code>
     */
    const OUT = 4;
    /**
     * <pre>
     **
     *1.Client 到 IM 服务端的实时消息，IM 服务端会回复一个下行消息ACK（Type= ACK； mType＝MSGACK2C），
     *以确定IM服务端已经收到该消息，客户端根据 msgid 来判断属于那个消息的ACK。
     *2.IM 服务端到 Client 端的实时消息，Client 需要回复一个上行消息ACK，
     *如果 Client 收到的消息类型 type 为 SYS_BROADCAST（系统广播）则 ACK的 mtype 传 SYS_MSG_ACK_2S（系统广播消息ACK），否则 mtype 传 USER_MSG_ACK_2S（用户消息ACK）。
     *用来确定Client端已经收到该消息，需要客户端额外传入 appkey 、sid（ack消息的发送者）、msgVersion（消息版本号） 。 IM服务端根据这三个参数确定ACK记录。
     *3.为了保证消息的到达率，Client 端针对没收到ACK的消息进行重试策略。 以及IM服务端根据Client 端的ACK来同步其接收到的消息情况。
     *4.Client 到 IM 服务端拉取离线消息并接收到离线消息列表的时候，Client 需要回复一个上行消息ACK，
     *此时传回的 mtype 使用收到离线消息上的mType，即 PULL_OFFLINE_MSG（拉取用户离线消息）／ PULL_SYS_MSG（拉取系统广播的消息）
     * </pre>
     *
     * <code>ACK = 5;</code>
     */
    const ACK = 5;
    /**
     * <pre>
     **服务器通知，Client 会在一些场景下收到 IM Server 的服务器通知，有以下几种：
     *1. mType=INVALIDCONNECT; IM检测出用户多端登录，踢出用户的上一次活跃链接，客户端做相应处理。用于TYPE=SERVER_NOTICE，无 body
     *2. mType=MUSTRELOGIN; 用户session、认证信息失效， 需要重新获取认证信息。用于TYPE=SERVER_NOTICE，无 body
     *3. mType=NOREQUEST; 不允许发送上行报文。用于TYPE=SERVER_NOTICE，无 body
     *4. mType=PUSH_VERSION; 消息版本（包括用户消息（单聊、群聊、系统通知）、系统广播消息）。用于TYPE=SERVER_NOTICE，body 为 IMServerActivity.MsgVersions
     *5. mType＝OUT_OF_SIZE; IM服务端的校验，客户端不需要此消息，消息长度超出限制。用于TYPE=SERVER_NOTICE，无 body。用于消息的下行反馈
     * </pre>
     *
     * <code>SERVER_NOTICE = 6;</code>
     */
    const SERVER_NOTICE = 6;
    /**
     * <pre>
     *---------- 消息类别标识：USER_MESSAGE ，用户类消息 begin ----------//
     *单聊，通过 rIds 来确认是否是批量发送
     * </pre>
     *
     * <code>USER_CHAT = 7;</code>
     */
    const USER_CHAT = 7;
    /**
     * <pre>
     *群聊，通过 rIds 来确认是否是群内的私聊
     * </pre>
     *
     * <code>GROUP_CHAT = 8;</code>
     */
    const GROUP_CHAT = 8;
    /**
     * <pre>
     *---------- 消息类别标识：SERVICE_MESSAGE ，客服类消息 begin ----------//
     *官方客服消息
     * </pre>
     *
     * <code>SERVICE_CHAT = 9;</code>
     */
    const SERVICE_CHAT = 9;
    /**
     * <pre>
     *VIP 1v1客服消息
     * </pre>
     *
     * <code>VIP_SERVICE_CHAT = 14;</code>
     */
    const VIP_SERVICE_CHAT = 14;
    /**
     * <pre>
     *---------- 消息类别标识：SYS_MESSAGE ，系统类消息 begin ----------//
     *系统通知
     * </pre>
     *
     * <code>SYS_NOTICE = 10;</code>
     */
    const SYS_NOTICE = 10;
    /**
     * <pre>
     *系统广播
     * </pre>
     *
     * <code>SYS_BROADCAST = 11;</code>
     */
    const SYS_BROADCAST = 11;
    /**
     * <pre>
     *群通知
     * </pre>
     *
     * <code>GROUP_NOTICE = 13;</code>
     */
    const GROUP_NOTICE = 13;
    /**
     * <pre>
     *---------- 消息类别标识：PULL ，用户到系统的消息 begin ----------//
     *拉取动作，关联 IMMsgActivity
     * </pre>
     *
     * <code>PULL_ACT = 12;</code>
     */
    const PULL_ACT = 12;
}

